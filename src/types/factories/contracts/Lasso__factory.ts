/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Lasso, LassoInterface } from "../../contracts/Lasso";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract ISuperfluid",
        name: "host",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "FlowRateZero",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "ServiceFromAccountActive",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "date",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "flowRate",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "string",
        name: "title",
        type: "string",
      },
      {
        indexed: false,
        internalType: "string",
        name: "subscriptionType",
        type: "string",
      },
    ],
    name: "ServiceCreated",
    type: "event",
  },
  {
    inputs: [],
    name: "cfaV1",
    outputs: [
      {
        internalType: "contract ISuperfluid",
        name: "host",
        type: "address",
      },
      {
        internalType: "contract IConstantFlowAgreementV1",
        name: "cfa",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_title",
        type: "string",
      },
      {
        internalType: "string",
        name: "_subscriptionType",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "_flowRate",
        type: "uint256",
      },
    ],
    name: "createService",
    outputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "active",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "date",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "subscribersAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "flowRate",
            type: "uint256",
          },
          {
            internalType: "string",
            name: "title",
            type: "string",
          },
          {
            internalType: "string",
            name: "subscriptionType",
            type: "string",
          },
        ],
        internalType: "struct Lasso.Service",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "services",
    outputs: [
      {
        internalType: "bool",
        name: "active",
        type: "bool",
      },
      {
        internalType: "uint256",
        name: "date",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "subscribersAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "flowRate",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "title",
        type: "string",
      },
      {
        internalType: "string",
        name: "subscriptionType",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161098d38038061098d83398101604081905261002f91610121565b6040805180820182526001600160a01b0383168082529151635b69006f60e11b81527fa9214cc96615e0085d3bb077758db69497dc2dce3b2b1e97bc93c3d18d83efd360048201529091602083019163b6d200de90602401602060405180830381865afa1580156100a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100c89190610121565b6001600160a01b039081169091528151600080546001600160a01b031990811692841692909217905560209092015160018054909316911617905550610145565b6001600160a01b038116811461011e57600080fd5b50565b60006020828403121561013357600080fd5b815161013e81610109565b9392505050565b610839806101546000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80636d966d01146100465780637b15f1b614610074578063d3112b2e14610094575b600080fd5b6100596100543660046105f3565b6100e8565b60405161006b9695949392919061067d565b60405180910390f35b610087610082366004610712565b610235565b60405161006b9190610786565b6000546001546100bb9173ffffffffffffffffffffffffffffffffffffffff908116911682565b6040805173ffffffffffffffffffffffffffffffffffffffff93841681529290911660208301520161006b565b60026020819052600091825260409091208054600182015492820154600383015460048401805460ff90941695949293919291610124906107f2565b80601f0160208091040260200160405190810160405280929190818152602001828054610150906107f2565b801561019d5780601f106101725761010080835404028352916020019161019d565b820191906000526020600020905b81548152906001019060200180831161018057829003601f168201915b5050505050908060050180546101b2906107f2565b80601f01602080910402602001604051908101604052809291908181526020018280546101de906107f2565b801561022b5780601f106102005761010080835404028352916020019161022b565b820191906000526020600020905b81548152906001019060200180831161020e57829003601f168201915b5050505050905086565b6102706040518060c0016040528060001515815260200160008152602001600081526020016000815260200160608152602001606081525090565b81600003610290576040516299cbe360e21b815260040160405180910390fd5b3360009081526002602052604090205460ff1615156001036102cb576040516314dc893760e01b815233600482015260240160405180910390fd5b6040518060c001604052806001151581526020014281526020016000815260200183815260200187878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505090825250604080516020601f8801819004810282018101909252868152918101919087908790819084018382808284376000920182905250939094525050338152600260208181526040928390208551815460ff1916901515178155858201516001820155928501519183019190915560608401516003830155608084015180519293506103be926004850192919091019061055a565b5060a082015180516103da91600584019160209091019061055a565b505033600090815260026020818152604092839020835160c081018552815460ff1615158152600182015492810192909252918201549281019290925260038101546060830152600481018054929350909160808401919061043b906107f2565b80601f0160208091040260200160405190810160405280929190818152602001828054610467906107f2565b80156104b45780601f10610489576101008083540402835291602001916104b4565b820191906000526020600020905b81548152906001019060200180831161049757829003601f168201915b505050505081526020016005820180546104cd906107f2565b80601f01602080910402602001604051908101604052809291908181526020018280546104f9906107f2565b80156105465780601f1061051b57610100808354040283529160200191610546565b820191906000526020600020905b81548152906001019060200180831161052957829003601f168201915b505050505081525050905095945050505050565b828054610566906107f2565b90600052602060002090601f01602090048101928261058857600085556105ce565b82601f106105a157805160ff19168380011785556105ce565b828001600101855582156105ce579182015b828111156105ce5782518255916020019190600101906105b3565b506105da9291506105de565b5090565b5b808211156105da57600081556001016105df565b60006020828403121561060557600080fd5b813573ffffffffffffffffffffffffffffffffffffffff8116811461062957600080fd5b9392505050565b6000815180845260005b818110156106565760208185018101518683018201520161063a565b81811115610668576000602083870101525b50601f01601f19169290920160200192915050565b861515815285602082015284604082015283606082015260c0608082015260006106aa60c0830185610630565b82810360a08401526106bc8185610630565b9998505050505050505050565b60008083601f8401126106db57600080fd5b50813567ffffffffffffffff8111156106f357600080fd5b60208301915083602082850101111561070b57600080fd5b9250929050565b60008060008060006060868803121561072a57600080fd5b853567ffffffffffffffff8082111561074257600080fd5b61074e89838a016106c9565b9097509550602088013591508082111561076757600080fd5b50610774888289016106c9565b96999598509660400135949350505050565b602081528151151560208201526020820151604082015260408201516060820152606082015160808201526000608083015160c060a08401526107cc60e0840182610630565b905060a0840151601f198483030160c08501526107e98282610630565b95945050505050565b600181811c9082168061080657607f821691505b60208210810361082657634e487b7160e01b600052602260045260246000fd5b5091905056fea164736f6c634300080d000a";

type LassoConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LassoConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Lasso__factory extends ContractFactory {
  constructor(...args: LassoConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    host: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Lasso> {
    return super.deploy(host, overrides || {}) as Promise<Lasso>;
  }
  override getDeployTransaction(
    host: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(host, overrides || {});
  }
  override attach(address: string): Lasso {
    return super.attach(address) as Lasso;
  }
  override connect(signer: Signer): Lasso__factory {
    return super.connect(signer) as Lasso__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LassoInterface {
    return new utils.Interface(_abi) as LassoInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Lasso {
    return new Contract(address, _abi, signerOrProvider) as Lasso;
  }
}
